properties([
    parameters([
        string(defaultValue: 'variables.tfvars', description: 'Specify the file name', name: 'File-Name'),
        choice(choices: ['apply', 'destroy'], description: 'Select Terraform action', name: 'Terraform-Action')
    ])
])

pipeline {
    agent any
    stages {
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/Laasya6429/reddit-deployment'
            }
        }
        stage('Azure Login') {
            steps {
                // Use Azure Service Principal credential
                withCredentials([azureServicePrincipal('azure-sp')]) {
                    script {
                        sh '''
                            az login --service-principal \
                                --username $AZURE_CLIENT_ID \
                                --password $AZURE_CLIENT_SECRET \
                                --tenant $AZURE_TENANT_ID
                            az account set --subscription $AZURE_SUBSCRIPTION_ID
                        '''
                    }
                }
            }
        }
        stage('Initializing Terraform') {
            steps {
                dir('AKS-TF') {
                    script {
                        sh 'terraform init'
                    }
                }
            }
        }
        stage('Validate Terraform Code') {
            steps {
                dir('AKS-TF') {
                    script {
                        sh 'terraform validate'
                    }
                }
            }
        }
        stage('Terraform Plan') {
            steps {
                dir('AKS-TF') {
                    script {
                        sh "terraform plan -var-file=${params.'File-Name'}"
                    }
                }
            }
        }
        stage('Terraform Action') {
            steps {
                script {
                    echo "${params.'Terraform-Action'}"
                    dir('AKS-TF') {
                        script {
                            if (params.'Terraform-Action' == 'apply') {
                                sh "terraform apply -auto-approve -var-file=${params.'File-Name'}"
                            } else if (params.'Terraform-Action' == 'destroy') {
                                sh "terraform destroy -auto-approve -var-file=${params.'File-Name'}"
                            } else {
                                error "Invalid value for Terraform-Action: ${params.'Terraform-Action'}"
                            }
                        }
                    }
                }
            }
        }
        stage('Get AKS Credentials') {
            steps {
                dir('AKS-TF') {
                    script {
                        sh '''
                            terraform output -raw aks_cluster_name > cluster_name.txt
                            terraform output -raw resource_group_name > resource_group.txt
                            CLUSTER_NAME=$(cat cluster_name.txt)
                            RESOURCE_GROUP=$(cat resource_group.txt)
                            az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --overwrite-existing
                        '''
                    }
                }
            }
        }
    }
} 